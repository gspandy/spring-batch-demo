<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/batch
       http://www.springframework.org/schema/batch/spring-batch.xsd">

    <import resource="applicationContext.xml"/>

    <!--配置了这次运行的JOB：csvJob。本Job包含一个Step，完成一个完整的CSV文件读写功能。
    分别由 csvItemReader完成CSV文件的读操作，由 csvItemProcessor完成对取得数据的处理，
    由 csvItemWriter完成对CSV文件的写操作。-->
    <batch:job id="csvJob">
        <batch:step id="csvStep">
            <tasklet transaction-manager="transactionManager">
                <chunk reader="csvItemReader" writer="csvItemWriter"
                       processor="csvItemProcessor"
                       commit-interval="1">
                </chunk>
            </tasklet>
        </batch:step>
    </batch:job>

    <!--csvItemReader实现的是Spring Batch提供FlatFileItemReader类，此类主要用于Flat文件的读操作。
    它包含两个必要的属性 resource和 lineMapper。前者指定要读取的文件的位置，后者是将文件的每一行映射成一个Pojo对象。
    其中 lineMapper也有两个重要属性 lineTokenizer和 fieldSetMapper， lineTokenizer将文件的一行分解成一个 FieldSet，
    然后由 fieldSetMapper映射成Pojo对象。这种方式与DB的读操作非常类似。lineMapper类似于ResultSet，
    文件中的一行类似于Table中的一条记录，被封装成的FieldSet，类似于RowMapper。至于怎么将一条记录封装，
    这个工作由lineTokenizer的继承类DelimitedLineTokenizer完成。DelimitedLineTokenizer的delimiter属性决定文件的一行数据按照什么分解，
    默认的是“，”， names属性标示分解的每个字段的名字，传给fieldSetMapper（本实例用的是BeanWrapperFieldSetMapper）的时候，
    就可以按照这个名字取得相应的值。fieldSetMapper的属性prototypeBeanName，是映射Pojo类的名字。设置了此属性后，
    框架就会将lineTokenizer分解成的一个FieldSet映射成Pojo对象，
    映射是按照名字来完成的(lineTokenizer分解时标注的名字与Pojo对象中字段的名字对应)。
    总之，FlatFileItemReader读取一条记录由以下四步完成：
    1，从resource指定的文件中读取一条记录；
    2，lineTokenizer将这条记录按照delimiter分解成Fileset，每个字段的名字由names属性取得；
    3，将分解成的Fileset传递给fieldSetMapper，由其按照名字映射成Pojo对象；
    4，最终由FlatFileItemReader将映射成的Pojo对象返回，框架将返回的对象传递给Processor。-->
    <!-- 读取csv文件 -->
    <bean id="csvItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="classpath:inputFile.csv"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer" ref="lineTokenizer"/>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="prototypeBeanName" value="student"></property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!-- lineTokenizer -->
    <bean id="lineTokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <property name="delimiter" value=","/>
        <property name="names">
            <list>
                <value>id</value>
                <value>name</value>
                <value>age</value>
                <value>score</value>
            </list>
        </property>
    </bean>

    <!-- 写CSV文件 -->
    <bean id="csvItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="classpath:outputFile.csv"/>
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter" value=","></property>
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="name,age,score"></property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

</beans>